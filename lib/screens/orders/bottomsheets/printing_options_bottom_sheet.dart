import 'package:flutter/material.dart';
import 'package:nb_utils/nb_utils.dart';
import 'package:zed_nano/models/branchTerminals/BranchTerminalsResponse.dart';
import 'package:zed_nano/models/order_payment_status/OrderDetailResponse.dart';
import 'package:zed_nano/providers/helpers/providers_helpers.dart';
import 'package:zed_nano/screens/invoices/pdf_invoice_page.dart';
import 'package:zed_nano/screens/widget/common/base_bottom_sheet.dart';
import 'package:zed_nano/screens/widget/common/common_widgets.dart';
import 'package:zed_nano/screens/widget/common/custom_snackbar.dart';
import 'package:zed_nano/services/BusinessDetailsContextExtension.dart';
import 'package:zed_nano/services/pdfs/pdf_order_service.dart';

class PrintingOptionsBottomSheet extends StatefulWidget {
  PrintingOptionsBottomSheet({super.key, this.printOrderInvoiceId});
  String? printOrderInvoiceId;

  @override
  State<PrintingOptionsBottomSheet> createState() => _PrintingOptionsBottomSheetState();
}

class _PrintingOptionsBottomSheetState extends State<PrintingOptionsBottomSheet> {

  BranchTerminalsResponse? branchTerminalsResponse;
  List<BranchTerminalsData>? branchTerminalsDataList;
  OrderDetail? orderDetailData;
  bool _isGeneratingPdf = false;



  final List<String> steps = [
    'Generate PDF',
  ];



  @override
  void initState() {
    super.initState();
    steps.add('Send to POS');
    WidgetsBinding.instance.addPostFrameCallback((_) {
      getBranchTerminals();
      getOrderPaymentStatus();
    });
  }

  Future<void> getOrderPaymentStatus() async {
    final requestData = <String, dynamic>{'pushyTransactionId': widget.printOrderInvoiceId};

    try {
      final response = await getBusinessProvider(context)
          .getOrderPaymentStatus(requestData: requestData, context: context);

      if (response.isSuccess) {
        setState(() {
          orderDetailData = response.data?.order;
        });
      } else {
        showCustomToast(response.message ?? 'Failed to load product details');
      }
    } catch (e) {
      showCustomToast('Failed to load Order details');
    }
  }

  Future<void> getBranchTerminals() async {

    try {
      final response =
      await getBusinessProvider(context).getBranchTerminals(context: context);

      if (response.isSuccess ) {
        if ( response.data?.data?.isNotEmpty == true) {
          setState(() {
            branchTerminalsResponse = response.data;
            branchTerminalsDataList = response.data?.data;
          });
        } else {
          // showCustomToast('No active terminals attached to this business');
        }


      } else {
        // showCustomToast(response.message ?? 'Failed to load product details');
      }
    } catch (e) {
      showCustomToast('Failed to load Printer details');
    }
  }

  Future<void> doSendToPos() async {

    final requestData = <String, dynamic>{
      'pushTransactionId': widget.printOrderInvoiceId,
      'serialNo': branchTerminalsDataList?.first.terminalSerialNumber,
    };

    try {
      final response =
      await getBusinessProvider(context).doSendToPos(requestData: requestData,context: context);

      if (response.isSuccess) {
        showCustomToast(response.message, isError: false);
        finish(context);
      } else {
        showCustomToast(response.message ?? 'Failed to load product details');
      }
    } catch (e) {
      showCustomToast('Failed to load Order details');
    }
  }


  Future<void> _openPdfPreview() async {
    // if (orderDetailData == null) {
    //   // showCustomToast('Invoice data not loaded yet');
    //   return;
    // }

    setState(() {
      _isGeneratingPdf = true;
    });

    try {
      // Generate PDF bytes using the service
      final pdfBytes = await PdfOrderService.generateOrderPdf(
        orderDetailData!,
        context,
      );

      setState(() {
        _isGeneratingPdf = false;
      });

      // Navigate to PDF preview with generated bytes
      if (mounted) {
        PdfPage(
          pdfBytes: pdfBytes,
          title: 'Order #${orderDetailData?.orderNumber}',
          fileName: 'Order_${orderDetailData?.orderNumber}.pdf',
        ).launch(context).then((value) {
          Navigator.pop(context);
        });
      }
    } catch (e) {
      setState(() {
        _isGeneratingPdf = false;
      });

      if (mounted) {
        showCustomToast('Error generating PDF: $e');
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return BaseBottomSheet(
      title: 'More Actions',
      initialChildSize: 0.5,
      headerContent:  const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Select an option to proceed.',
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.w400,
              fontFamily: 'Poppins',
              color: Color(0xff71727a),
            ),
          ),
        ],
      ).paddingTop(16),
      bodyContent: SizedBox(
        height: MediaQuery.of(context).size.height * 0.35,
        child: _isGeneratingPdf
            ? const Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              CircularProgressIndicator(),
              SizedBox(height: 16),
              Text(
                'Generating PDF...',
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w400,
                  fontFamily: 'Poppins',
                  color: Color(0xff71727a),
                ),
              ),
            ],
          ),
        )
            : ListView.builder(
          itemCount: steps.length,
          itemBuilder: (context, index) {
            return arrowListItem(
              index: index,
              steps: steps,
              onTab: (index) async {
                //get the step name
                final stepName = steps[index as int];
                switch (stepName) {
                  case 'Send to POS':
                    // Navigator.pushNamed(context, AppRoutes.getNewCategoryRoutes());
                  if(branchTerminalsDataList?.isNotEmpty == true){
                    await doSendToPos();
                  }else{
                    showCustomToast('No active terminals attached to this business');
                  }
                  case 'Generate PDF':
                    await _openPdfPreview();
                    // finish(context) is already called in _openPdfPreview()
                  default:
                    break;
                }
              },
            );
          },
        ),
      ),
    );
  }
}
